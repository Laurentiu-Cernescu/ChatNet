//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfChatService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WcfChatService", IsReference=true)]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool HasUnreadField;
        
        private string PasswordField;
        
        private WcfChatService.Status StatusField;
        
        private string UsernameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasUnread
        {
            get
            {
                return this.HasUnreadField;
            }
            set
            {
                this.HasUnreadField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfChatService.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/WcfChatService")]
    public enum Status : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/WcfChatService")]
    public enum Response : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Succes = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WcfChatService", IsReference=true)]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private string MessageTextField;
        
        private WcfChatService.User ReceiverField;
        
        private bool SeenField;
        
        private WcfChatService.User SenderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText
        {
            get
            {
                return this.MessageTextField;
            }
            set
            {
                this.MessageTextField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfChatService.User Receiver
        {
            get
            {
                return this.ReceiverField;
            }
            set
            {
                this.ReceiverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Seen
        {
            get
            {
                return this.SeenField;
            }
            set
            {
                this.SeenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfChatService.User Sender
        {
            get
            {
                return this.SenderField;
            }
            set
            {
                this.SenderField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IChatService", CallbackContract=typeof(IChatServiceCallback))]
public interface IChatService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
    WcfChatService.Response Login(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> LoginAsync(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Logout", ReplyAction="http://tempuri.org/IChatService/LogoutResponse")]
    WcfChatService.Response Logout(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Logout", ReplyAction="http://tempuri.org/IChatService/LogoutResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> LogoutAsync(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
    WcfChatService.Response Register(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> RegisterAsync(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
    WcfChatService.Response SendMessage(WcfChatService.Message message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> SendMessageAsync(WcfChatService.Message message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetFriends", ReplyAction="http://tempuri.org/IChatService/GetFriendsResponse")]
    WcfChatService.User[] GetFriends(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetFriends", ReplyAction="http://tempuri.org/IChatService/GetFriendsResponse")]
    System.Threading.Tasks.Task<WcfChatService.User[]> GetFriendsAsync(WcfChatService.User user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
    WcfChatService.Message[] GetMessages(WcfChatService.User owner, WcfChatService.User partner);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
    System.Threading.Tasks.Task<WcfChatService.Message[]> GetMessagesAsync(WcfChatService.User owner, WcfChatService.User partner);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddFriend", ReplyAction="http://tempuri.org/IChatService/AddFriendResponse")]
    WcfChatService.Response AddFriend(WcfChatService.User from, WcfChatService.User to);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddFriend", ReplyAction="http://tempuri.org/IChatService/AddFriendResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> AddFriendAsync(WcfChatService.User from, WcfChatService.User to);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveFriend", ReplyAction="http://tempuri.org/IChatService/RemoveFriendResponse")]
    WcfChatService.Response RemoveFriend(WcfChatService.User from, WcfChatService.User to);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveFriend", ReplyAction="http://tempuri.org/IChatService/RemoveFriendResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> RemoveFriendAsync(WcfChatService.User from, WcfChatService.User to);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/MarkAsRead", ReplyAction="http://tempuri.org/IChatService/MarkAsReadResponse")]
    WcfChatService.Response MarkAsRead(WcfChatService.Message message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/MarkAsRead", ReplyAction="http://tempuri.org/IChatService/MarkAsReadResponse")]
    System.Threading.Tasks.Task<WcfChatService.Response> MarkAsReadAsync(WcfChatService.Message message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/PingService", ReplyAction="http://tempuri.org/IChatService/PingServiceResponse")]
    int PingService();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/PingService", ReplyAction="http://tempuri.org/IChatService/PingServiceResponse")]
    System.Threading.Tasks.Task<int> PingServiceAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IChatServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/NotifyNewMessage")]
    void NotifyNewMessage(WcfChatService.Message message);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/NotifyStatusChange")]
    void NotifyStatusChange(WcfChatService.User user, WcfChatService.Status newStatus);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IChatServiceChannel : IChatService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<IChatService>, IChatService
{
    
    public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public WcfChatService.Response Login(WcfChatService.User user)
    {
        return base.Channel.Login(user);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> LoginAsync(WcfChatService.User user)
    {
        return base.Channel.LoginAsync(user);
    }
    
    public WcfChatService.Response Logout(WcfChatService.User user)
    {
        return base.Channel.Logout(user);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> LogoutAsync(WcfChatService.User user)
    {
        return base.Channel.LogoutAsync(user);
    }
    
    public WcfChatService.Response Register(WcfChatService.User user)
    {
        return base.Channel.Register(user);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> RegisterAsync(WcfChatService.User user)
    {
        return base.Channel.RegisterAsync(user);
    }
    
    public WcfChatService.Response SendMessage(WcfChatService.Message message)
    {
        return base.Channel.SendMessage(message);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> SendMessageAsync(WcfChatService.Message message)
    {
        return base.Channel.SendMessageAsync(message);
    }
    
    public WcfChatService.User[] GetFriends(WcfChatService.User user)
    {
        return base.Channel.GetFriends(user);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.User[]> GetFriendsAsync(WcfChatService.User user)
    {
        return base.Channel.GetFriendsAsync(user);
    }
    
    public WcfChatService.Message[] GetMessages(WcfChatService.User owner, WcfChatService.User partner)
    {
        return base.Channel.GetMessages(owner, partner);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Message[]> GetMessagesAsync(WcfChatService.User owner, WcfChatService.User partner)
    {
        return base.Channel.GetMessagesAsync(owner, partner);
    }
    
    public WcfChatService.Response AddFriend(WcfChatService.User from, WcfChatService.User to)
    {
        return base.Channel.AddFriend(from, to);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> AddFriendAsync(WcfChatService.User from, WcfChatService.User to)
    {
        return base.Channel.AddFriendAsync(from, to);
    }
    
    public WcfChatService.Response RemoveFriend(WcfChatService.User from, WcfChatService.User to)
    {
        return base.Channel.RemoveFriend(from, to);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> RemoveFriendAsync(WcfChatService.User from, WcfChatService.User to)
    {
        return base.Channel.RemoveFriendAsync(from, to);
    }
    
    public WcfChatService.Response MarkAsRead(WcfChatService.Message message)
    {
        return base.Channel.MarkAsRead(message);
    }
    
    public System.Threading.Tasks.Task<WcfChatService.Response> MarkAsReadAsync(WcfChatService.Message message)
    {
        return base.Channel.MarkAsReadAsync(message);
    }
    
    public int PingService()
    {
        return base.Channel.PingService();
    }
    
    public System.Threading.Tasks.Task<int> PingServiceAsync()
    {
        return base.Channel.PingServiceAsync();
    }
}
